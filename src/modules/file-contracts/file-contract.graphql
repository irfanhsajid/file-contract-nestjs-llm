scalar Upload
scalar DateTime
scalar EventTypeScalar
scalar CategoryScalar
scalar ProductTypeScalar

type Source {
  similarityScore: Float
  chunkId: String
  chunkNumber: Int
  text: String
  textS3Link: String
  pageNumber: Int
  documentId: Int
  documentCategory: String
  totalPage: Int
  filename: String
  testType: String
  productType: ProductTypeScalar
  coordinates: [String]
  sourceString: String
}

type ExtractionResult {
  _id: String
  category: CategoryScalar
  eventType: EventTypeScalar
  eventDetail: String
  llmExtraction: String
  reasoning: String
  patientId: Int
  eventId: String
  model: String
  parserName: String
  codeLabel: String
  codeValue: String
  source: [Source]
}

type MetaData {
  projectName: String
  cancerType: String
  patientId: Int
  caseId: Int
  casebundlingId: Int
  casebundlingType: String
  extractionId: String
  genaiPipelineVersion: String
  totalExtractions: Int
  validationStatus: String
}

type PaginatedFileContracts {
  items: [FileContract]
  total: Int
  page: Int
  perPage: Int
}

type FileContract {
  _id: String
  schemaVersion: String
  metadata: MetaData
  extractionResults: [ExtractionResult]
  createdAt: DateTime
}

input InputListFileContracts {
  casebundlingIds: [Int]
  patientIds: [Int]
  eventTypes: [EventTypeScalar]
  validationStatuses: [String]
  projectNames: [String]
  cancerTypes: [String]
  page: Int
  perPage: Int
}

input SourceInput {
  similarityScore: Float
  chunkId: String
  chunkNumber: Int
  text: String
  textS3Link: String
  pageNumber: Int
  documentId: Int
  documentCategory: String
  totalPage: Int
  filename: String
  testType: String
  productType: String
  coordinates: [String]
  sourceString: String
}

input CreateExtractionResultInput {
  category: CategoryScalar!
  eventType: EventTypeScalar!
  eventDetail: String!
  llmExtraction: String
  reasoning: String
  patientId: Int!
  casebundlingId: Int!
  eventId: String
  model: String
  parserName: String
  codeLabel: String
  codeValue: String
  source: [SourceInput]
}

input UpdateExtractionResultInput {
  category: CategoryScalar
  eventType: EventTypeScalar
  eventDetail: String
  llmExtraction: String
  reasoning: String
  patientId: Int
  casebundlingId: Int
  eventId: String
  model: String
  parserName: String
  codeLabel: String
  codeValue: String
  source: [SourceInput]
}

type Query {
  getFileContracts(input: InputListFileContracts): PaginatedFileContracts
}

type Mutation {
  processCleanIQResult(file: Upload!): FileContract!
  createExtractionResult(input: CreateExtractionResultInput!): ExtractionResult!
  updateExtractionResult(extractionId: String!, input: UpdateExtractionResultInput!): ExtractionResult!
  deleteExtractionResult(extractionId: String!): Boolean!
}
