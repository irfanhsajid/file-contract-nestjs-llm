enum ProductType {
  EPIC
  SIGNATERA
}

enum Status {
  COMPLETED
  PENDING
}

type Source {
  similarityScore: Float
  chunkId: String
  chunkNumber: Int
  text: String
  textS3Link: String
  pageNumber: Int
  documentId: Int
  documentCategory: String
  totalPage: Int
  filename: String
  testType: String
  productType: ProductType
  coordinates: [String]
}

type SourceString {
  value: String
}

union SourceUnion = Source | SourceString

type ExtractionEvent {
  category: String
  eventType: String
  eventDetail: String
  llmExtraction: String
  reasoning: String
  patientId: Int
  eventId: String
  model: String
  parserName: String
  codeLabel: String
  codeValue: String
  source: SourceUnion
}

type MetaData {
  patientId: Int
  caseId: Int
  casebundlingId: Int
  casebundlingType: String
  extractionId: String
  genaiPipelineVersion: String
  totalExtractions: Int
  extractionStatus: Status
  validationStatus: Status
}

type FileContract {
  _id: String
  schemaVersion: String
  metadata: MetaData
  ExtractionEvents: [ExtractionEvent]
  createdAt: String
  updatedAt: String
}

type DeleteEventResponse {
  message: String
  status: Boolean
}

type CreateEventResponse {
  message: String
  status: Boolean
}

type UpdateEventResponse {
  data: ExtractionEvent
  message: String
  status: Boolean
}

# Input Types
input SourceInput {
  similarityScore: Float
  chunkId: String
  chunkNumber: Int
  text: String
  textS3Link: String
  pageNumber: Int
  documentId: Int
  documentCategory: String
  totalPage: Int
  filename: String
  testType: String
  productType: ProductType
  coordinates: [String]
  value: String # Added to handle string case (e.g., comma-separated UUIDs)
}

input EventInput {
  patientId: Int!
  eventId: String!
  category: String!
  eventType: String!
  eventDetail: String!
  llmExtraction: String!
  reasoning: String!
  parserName: String
  codeLabel: String
  codeValue: String
  source: SourceInput
}

type Query {
  getFileContract(id: String!): FileContract
  getExtraction(extractionId: String!): FileContract
  getSingleEvent(eventId: String, filename: String): ExtractionEvent
}

type Mutation {
  deleteEventByEventId(eventId: String!): DeleteEventResponse
  createEvent(input: EventInput!): CreateEventResponse
  updateEvent(eventId: String!, input: EventInput!): UpdateEventResponse
}
