import { z } from 'zod';
export declare const zProductTypeSchema: z.ZodEnum<["epic", "signatera"]>;
export declare const zStatusSchema: z.ZodEnum<["completed", "pending"]>;
export declare const zSourceSchema: z.ZodObject<{
    similarityScore: z.ZodNumber;
    chunkId: z.ZodString;
    chunkNumber: z.ZodNumber;
    text: z.ZodString;
    textS3Link: z.ZodString;
    pageNumber: z.ZodNumber;
    documentId: z.ZodNumber;
    documentCategory: z.ZodString;
    totalPage: z.ZodNumber;
    filename: z.ZodString;
    testType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    productType: z.ZodEnum<["epic", "signatera"]>;
    coordinates: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodOptional<z.ZodNumber>, "many">>>;
}, "strip", z.ZodTypeAny, {
    similarityScore: number;
    chunkId: string;
    chunkNumber: number;
    text: string;
    textS3Link: string;
    pageNumber: number;
    documentId: number;
    documentCategory: string;
    totalPage: number;
    filename: string;
    productType: "epic" | "signatera";
    testType?: string | null | undefined;
    coordinates?: (number | undefined)[] | null | undefined;
}, {
    similarityScore: number;
    chunkId: string;
    chunkNumber: number;
    text: string;
    textS3Link: string;
    pageNumber: number;
    documentId: number;
    documentCategory: string;
    totalPage: number;
    filename: string;
    productType: "epic" | "signatera";
    testType?: string | null | undefined;
    coordinates?: (number | undefined)[] | null | undefined;
}>;
export declare const zSourceUnionSchema: z.ZodUnion<[z.ZodOptional<z.ZodNullable<z.ZodObject<{
    similarityScore: z.ZodNumber;
    chunkId: z.ZodString;
    chunkNumber: z.ZodNumber;
    text: z.ZodString;
    textS3Link: z.ZodString;
    pageNumber: z.ZodNumber;
    documentId: z.ZodNumber;
    documentCategory: z.ZodString;
    totalPage: z.ZodNumber;
    filename: z.ZodString;
    testType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    productType: z.ZodEnum<["epic", "signatera"]>;
    coordinates: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodOptional<z.ZodNumber>, "many">>>;
}, "strip", z.ZodTypeAny, {
    similarityScore: number;
    chunkId: string;
    chunkNumber: number;
    text: string;
    textS3Link: string;
    pageNumber: number;
    documentId: number;
    documentCategory: string;
    totalPage: number;
    filename: string;
    productType: "epic" | "signatera";
    testType?: string | null | undefined;
    coordinates?: (number | undefined)[] | null | undefined;
}, {
    similarityScore: number;
    chunkId: string;
    chunkNumber: number;
    text: string;
    textS3Link: string;
    pageNumber: number;
    documentId: number;
    documentCategory: string;
    totalPage: number;
    filename: string;
    productType: "epic" | "signatera";
    testType?: string | null | undefined;
    coordinates?: (number | undefined)[] | null | undefined;
}>>>, z.ZodOptional<z.ZodNullable<z.ZodString>>]>;
export declare const zExtractionResultSchema: z.ZodObject<{
    _id: z.ZodOptional<z.ZodString>;
    category: z.ZodString;
    eventType: z.ZodString;
    eventDetail: z.ZodString;
    llmExtraction: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reasoning: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    patientId: z.ZodNumber;
    eventId: z.ZodString;
    model: z.ZodString;
    parserName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    codeLabel: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    codeValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    source: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodOptional<z.ZodNullable<z.ZodObject<{
        similarityScore: z.ZodNumber;
        chunkId: z.ZodString;
        chunkNumber: z.ZodNumber;
        text: z.ZodString;
        textS3Link: z.ZodString;
        pageNumber: z.ZodNumber;
        documentId: z.ZodNumber;
        documentCategory: z.ZodString;
        totalPage: z.ZodNumber;
        filename: z.ZodString;
        testType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        productType: z.ZodEnum<["epic", "signatera"]>;
        coordinates: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodOptional<z.ZodNumber>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        similarityScore: number;
        chunkId: string;
        chunkNumber: number;
        text: string;
        textS3Link: string;
        pageNumber: number;
        documentId: number;
        documentCategory: string;
        totalPage: number;
        filename: string;
        productType: "epic" | "signatera";
        testType?: string | null | undefined;
        coordinates?: (number | undefined)[] | null | undefined;
    }, {
        similarityScore: number;
        chunkId: string;
        chunkNumber: number;
        text: string;
        textS3Link: string;
        pageNumber: number;
        documentId: number;
        documentCategory: string;
        totalPage: number;
        filename: string;
        productType: "epic" | "signatera";
        testType?: string | null | undefined;
        coordinates?: (number | undefined)[] | null | undefined;
    }>>>, z.ZodOptional<z.ZodNullable<z.ZodString>>]>, "many">>>;
}, "strip", z.ZodTypeAny, {
    category: string;
    eventType: string;
    eventDetail: string;
    patientId: number;
    eventId: string;
    model: string;
    _id?: string | undefined;
    llmExtraction?: string | null | undefined;
    reasoning?: string | null | undefined;
    parserName?: string | null | undefined;
    codeLabel?: string | null | undefined;
    codeValue?: string | null | undefined;
    source?: (string | {
        similarityScore: number;
        chunkId: string;
        chunkNumber: number;
        text: string;
        textS3Link: string;
        pageNumber: number;
        documentId: number;
        documentCategory: string;
        totalPage: number;
        filename: string;
        productType: "epic" | "signatera";
        testType?: string | null | undefined;
        coordinates?: (number | undefined)[] | null | undefined;
    } | null | undefined)[] | null | undefined;
}, {
    category: string;
    eventType: string;
    eventDetail: string;
    patientId: number;
    eventId: string;
    model: string;
    _id?: string | undefined;
    llmExtraction?: string | null | undefined;
    reasoning?: string | null | undefined;
    parserName?: string | null | undefined;
    codeLabel?: string | null | undefined;
    codeValue?: string | null | undefined;
    source?: (string | {
        similarityScore: number;
        chunkId: string;
        chunkNumber: number;
        text: string;
        textS3Link: string;
        pageNumber: number;
        documentId: number;
        documentCategory: string;
        totalPage: number;
        filename: string;
        productType: "epic" | "signatera";
        testType?: string | null | undefined;
        coordinates?: (number | undefined)[] | null | undefined;
    } | null | undefined)[] | null | undefined;
}>;
export declare const zMetaDataSchema: z.ZodObject<{
    projectName: z.ZodString;
    cancerType: z.ZodString;
    patientId: z.ZodNumber;
    caseId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    casebundlingId: z.ZodNumber;
    casebundlingType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    extractionId: z.ZodString;
    genaiPipelineVersion: z.ZodString;
    totalExtractions: z.ZodNumber;
    validationStatus: z.ZodEnum<["completed", "pending"]>;
}, "strip", z.ZodTypeAny, {
    patientId: number;
    projectName: string;
    cancerType: string;
    casebundlingId: number;
    extractionId: string;
    genaiPipelineVersion: string;
    totalExtractions: number;
    validationStatus: "completed" | "pending";
    caseId?: number | null | undefined;
    casebundlingType?: string | null | undefined;
}, {
    patientId: number;
    projectName: string;
    cancerType: string;
    casebundlingId: number;
    extractionId: string;
    genaiPipelineVersion: string;
    totalExtractions: number;
    validationStatus: "completed" | "pending";
    caseId?: number | null | undefined;
    casebundlingType?: string | null | undefined;
}>;
export declare const zFileContractSchema: z.ZodObject<{
    schemaVersion: z.ZodString;
    metadata: z.ZodObject<{
        projectName: z.ZodString;
        cancerType: z.ZodString;
        patientId: z.ZodNumber;
        caseId: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        casebundlingId: z.ZodNumber;
        casebundlingType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        extractionId: z.ZodString;
        genaiPipelineVersion: z.ZodString;
        totalExtractions: z.ZodNumber;
        validationStatus: z.ZodEnum<["completed", "pending"]>;
    }, "strip", z.ZodTypeAny, {
        patientId: number;
        projectName: string;
        cancerType: string;
        casebundlingId: number;
        extractionId: string;
        genaiPipelineVersion: string;
        totalExtractions: number;
        validationStatus: "completed" | "pending";
        caseId?: number | null | undefined;
        casebundlingType?: string | null | undefined;
    }, {
        patientId: number;
        projectName: string;
        cancerType: string;
        casebundlingId: number;
        extractionId: string;
        genaiPipelineVersion: string;
        totalExtractions: number;
        validationStatus: "completed" | "pending";
        caseId?: number | null | undefined;
        casebundlingType?: string | null | undefined;
    }>;
    extractionResults: z.ZodArray<z.ZodObject<{
        _id: z.ZodOptional<z.ZodString>;
        category: z.ZodString;
        eventType: z.ZodString;
        eventDetail: z.ZodString;
        llmExtraction: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        reasoning: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        patientId: z.ZodNumber;
        eventId: z.ZodString;
        model: z.ZodString;
        parserName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        codeLabel: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        codeValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        source: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodUnion<[z.ZodOptional<z.ZodNullable<z.ZodObject<{
            similarityScore: z.ZodNumber;
            chunkId: z.ZodString;
            chunkNumber: z.ZodNumber;
            text: z.ZodString;
            textS3Link: z.ZodString;
            pageNumber: z.ZodNumber;
            documentId: z.ZodNumber;
            documentCategory: z.ZodString;
            totalPage: z.ZodNumber;
            filename: z.ZodString;
            testType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            productType: z.ZodEnum<["epic", "signatera"]>;
            coordinates: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodOptional<z.ZodNumber>, "many">>>;
        }, "strip", z.ZodTypeAny, {
            similarityScore: number;
            chunkId: string;
            chunkNumber: number;
            text: string;
            textS3Link: string;
            pageNumber: number;
            documentId: number;
            documentCategory: string;
            totalPage: number;
            filename: string;
            productType: "epic" | "signatera";
            testType?: string | null | undefined;
            coordinates?: (number | undefined)[] | null | undefined;
        }, {
            similarityScore: number;
            chunkId: string;
            chunkNumber: number;
            text: string;
            textS3Link: string;
            pageNumber: number;
            documentId: number;
            documentCategory: string;
            totalPage: number;
            filename: string;
            productType: "epic" | "signatera";
            testType?: string | null | undefined;
            coordinates?: (number | undefined)[] | null | undefined;
        }>>>, z.ZodOptional<z.ZodNullable<z.ZodString>>]>, "many">>>;
    }, "strip", z.ZodTypeAny, {
        category: string;
        eventType: string;
        eventDetail: string;
        patientId: number;
        eventId: string;
        model: string;
        _id?: string | undefined;
        llmExtraction?: string | null | undefined;
        reasoning?: string | null | undefined;
        parserName?: string | null | undefined;
        codeLabel?: string | null | undefined;
        codeValue?: string | null | undefined;
        source?: (string | {
            similarityScore: number;
            chunkId: string;
            chunkNumber: number;
            text: string;
            textS3Link: string;
            pageNumber: number;
            documentId: number;
            documentCategory: string;
            totalPage: number;
            filename: string;
            productType: "epic" | "signatera";
            testType?: string | null | undefined;
            coordinates?: (number | undefined)[] | null | undefined;
        } | null | undefined)[] | null | undefined;
    }, {
        category: string;
        eventType: string;
        eventDetail: string;
        patientId: number;
        eventId: string;
        model: string;
        _id?: string | undefined;
        llmExtraction?: string | null | undefined;
        reasoning?: string | null | undefined;
        parserName?: string | null | undefined;
        codeLabel?: string | null | undefined;
        codeValue?: string | null | undefined;
        source?: (string | {
            similarityScore: number;
            chunkId: string;
            chunkNumber: number;
            text: string;
            textS3Link: string;
            pageNumber: number;
            documentId: number;
            documentCategory: string;
            totalPage: number;
            filename: string;
            productType: "epic" | "signatera";
            testType?: string | null | undefined;
            coordinates?: (number | undefined)[] | null | undefined;
        } | null | undefined)[] | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    schemaVersion: string;
    metadata: {
        patientId: number;
        projectName: string;
        cancerType: string;
        casebundlingId: number;
        extractionId: string;
        genaiPipelineVersion: string;
        totalExtractions: number;
        validationStatus: "completed" | "pending";
        caseId?: number | null | undefined;
        casebundlingType?: string | null | undefined;
    };
    extractionResults: {
        category: string;
        eventType: string;
        eventDetail: string;
        patientId: number;
        eventId: string;
        model: string;
        _id?: string | undefined;
        llmExtraction?: string | null | undefined;
        reasoning?: string | null | undefined;
        parserName?: string | null | undefined;
        codeLabel?: string | null | undefined;
        codeValue?: string | null | undefined;
        source?: (string | {
            similarityScore: number;
            chunkId: string;
            chunkNumber: number;
            text: string;
            textS3Link: string;
            pageNumber: number;
            documentId: number;
            documentCategory: string;
            totalPage: number;
            filename: string;
            productType: "epic" | "signatera";
            testType?: string | null | undefined;
            coordinates?: (number | undefined)[] | null | undefined;
        } | null | undefined)[] | null | undefined;
    }[];
}, {
    schemaVersion: string;
    metadata: {
        patientId: number;
        projectName: string;
        cancerType: string;
        casebundlingId: number;
        extractionId: string;
        genaiPipelineVersion: string;
        totalExtractions: number;
        validationStatus: "completed" | "pending";
        caseId?: number | null | undefined;
        casebundlingType?: string | null | undefined;
    };
    extractionResults: {
        category: string;
        eventType: string;
        eventDetail: string;
        patientId: number;
        eventId: string;
        model: string;
        _id?: string | undefined;
        llmExtraction?: string | null | undefined;
        reasoning?: string | null | undefined;
        parserName?: string | null | undefined;
        codeLabel?: string | null | undefined;
        codeValue?: string | null | undefined;
        source?: (string | {
            similarityScore: number;
            chunkId: string;
            chunkNumber: number;
            text: string;
            textS3Link: string;
            pageNumber: number;
            documentId: number;
            documentCategory: string;
            totalPage: number;
            filename: string;
            productType: "epic" | "signatera";
            testType?: string | null | undefined;
            coordinates?: (number | undefined)[] | null | undefined;
        } | null | undefined)[] | null | undefined;
    }[];
}>;
export declare const zUploadFileSchema: z.ZodObject<{
    file: z.ZodObject<{
        filename: z.ZodString;
        mimetype: z.ZodString;
        encoding: z.ZodString;
        createReadStream: z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        filename: string;
        mimetype: string;
        encoding: string;
        createReadStream: (...args: unknown[]) => any;
    }, {
        filename: string;
        mimetype: string;
        encoding: string;
        createReadStream: (...args: unknown[]) => any;
    }>;
}, "strip", z.ZodTypeAny, {
    file: {
        filename: string;
        mimetype: string;
        encoding: string;
        createReadStream: (...args: unknown[]) => any;
    };
}, {
    file: {
        filename: string;
        mimetype: string;
        encoding: string;
        createReadStream: (...args: unknown[]) => any;
    };
}>;
